/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bookstore;

//import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.text.DateFormat;
//import java.text.SimpleDateFormat;
//import java.util.Date;
//import java.text.MessageFormat;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
//import javax.swing.JScrollPane;
//import javax.swing.JTable;
import javax.swing.ListSelectionModel;
//import javax.swing.event.ListSelectionEvent;
//import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user1
 */
public class CustomerOptions extends javax.swing.JFrame {

    /**
     * Creates new form CustomerOptions
     */
    static double Amount;

    public CustomerOptions() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        jLabel3.setText("CUSTOMER ID    : " + CustomerLogin.cusid);
        jLabel4.setText("Welcome, " + CustomerLogin.cusname + " [");
        jLabel6.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("la libreria");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton2.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        jButton2.setText("LOG OUT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        jTable2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable2.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "BOOK NAME", "EDITION", "PRICE", "DESCRIPTION", "PAGES", "LANGUAGE", "PUB_ID", "GENRE", "Author Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(jTable2);

        jButton6.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton6.setText("ORDER ITEM");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton5.setText("VIEW CART");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton10.setText("REMOVE FROM CART");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton10)
                    .addComponent(jButton6))
                .addGap(4, 4, 4))
        );

        jTabbedPane1.addTab("VIEW CART", jPanel3);

        jTable3.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 14)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book_ISBN", "Order_ID", "Order_Date", "Item Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButton9.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton9.setText("CANCEL ORDER");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton7.setText("VIEW ORDERS");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton11.setText("ORDER!");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("jLabel6");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addComponent(jButton11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ORDERED ITEMS", jPanel1);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("SEARCH BY:");

        jComboBox1.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "BOOK NAME", "GENRE", "PRICE: LOW TO HIGH", "PRICE: HIGH TO LOW" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton3.setText("SEARCH");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton4.setText("CLEAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "BOOK NAME", "EDITION", "PRICE", "DESCRIPTION", "PAGES", "LANGUAGE", "PUB_ID", "GENRE", "Author Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton1.setText("ADD TO CART");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton8.setText("REVIEW");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addGap(0, 111, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton1)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SEARCH BOOK", jPanel2);

        jTable4.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 14)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME ", "ADDRESS", "COUNTRY", "ZIP CODE", "PHONE NUMBER", "EMAIL ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jButton12.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        jButton12.setText("VIEW DETAILS");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton12)
                .addContainerGap(316, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("VIEW DETAILS", jPanel4);

        jLabel3.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel4.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        jLabel5.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 255));
        jLabel5.setText("]");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 346, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addContainerGap())
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed
    static String selectedISBN = null;
    static String status = "Due";
    static String pt = "Credit";
    int quantity;
    @SuppressWarnings("empty-statement")
    int order_id = 0;
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //int count = 0;
        DateFormat dateformat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        jTable2.setCellSelectionEnabled(true);
        ListSelectionModel cellSelectionModel = jTable2.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectedISBN = null;
        int[] selectedRow = jTable2.getSelectedRows();
        int[] selectedColumns = jTable2.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
            for (int j = 0; j < selectedColumns.length; j++) {
                selectedISBN = (String) jTable2.getValueAt(selectedRow[i], selectedColumns[j]);
            }
        }
        System.out.println("Selected: " + selectedISBN);
        DefaultTableModel model3 = (DefaultTableModel) jTable3.getModel();
        quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Quantity:", "Order Item", 1));
        //int order_id = 0;
        try {
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
            java.sql.Statement stmt = (java.sql.Statement) con.createStatement();
            String query = "Select * from Books where ISBN = '" + selectedISBN + "' ;";
            stmt.executeQuery(query);
            ResultSet rs = stmt.executeQuery(query);
            ResultSet rs2;
            int size = 0;
            while (rs.next()) {
                size++;
            }
            while (rs.previous());
            //JOptionPane.showMessageDialog(this, size);
            order_id = order_id + 1;
            while (rs.next()) {
                rows = 0;
                rows++;
                String isbn = rs.getString("ISBN");
                if (isInList(isbn, model3)) {
                    continue;
                }
                double price = rs.getDouble("Price");
                String query2 = "Insert into order_item Values(" + order_id + ",'" + dateformat.format(date)
                        + "', '" + CustomerLogin.cusid + "', '" + selectedISBN + "'," + price + "," + quantity + ");";
                //Order_Item( ID int(10) , Date date , Cus_ID int(10) , Book_ISBN int(10) , Item_Price Decimal(10,2) , Quantity int(3));
                stmt.execute(query2);
                String query3 = "Select * from Order_item where Cus_ID = '" + CustomerLogin.cusid + "' ;";
                rs2 = stmt.executeQuery(query3);
                while (rs2.next()) {
                    isbn = rs2.getString("Book_ISBN");
                    if (isInList(isbn, model3)) {
                        continue;
                    }
                    String oi = rs2.getString("ID");
                    String order_date = rs2.getString("Date");
                    String CusID = rs2.getString("Cus_ID");
                    price = rs2.getDouble("Item_Price");
                    int q = Integer.parseInt(rs2.getString("Quantity"));
                    model3.addRow(new Object[]{isbn, oi, order_date, price, q});
                    //    count = 1;
                }

            }

            if (rows == 2) {
                JOptionPane.showMessageDialog(this, "No Books.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jTable1.setCellSelectionEnabled(true);
        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        int[] selectedRow = jTable1.getSelectedRows();
        int[] selectedColumns = jTable1.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
            for (int j = 0; j < selectedColumns.length; j++) {
                selectedISBN = (String) jTable1.getValueAt(selectedRow[i], selectedColumns[j]);
            }
        }
        //System.out.println("Selected: " + selectedISBN);
        new BookReview().setVisible(true);
        //this.setVisible(false);

    }//GEN-LAST:event_jButton8ActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTable1.setCellSelectionEnabled(true);
        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectedISBN = null;
        int[] selectedRow = jTable1.getSelectedRows();
        int[] selectedColumns = jTable1.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
            for (int j = 0; j < selectedColumns.length; j++) {
                selectedISBN = (String) jTable1.getValueAt(selectedRow[i], selectedColumns[j]);
            }
        }
        JOptionPane.showMessageDialog(this,"Selected: " + selectedISBN);
        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();

        try {
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
            java.sql.Statement stmt = (java.sql.Statement) con.createStatement();
/*for loop*/String query = "Select * from Books where ISBN = '" + selectedISBN + "' ;";
            stmt.executeQuery(query);
            ResultSet rs = stmt.executeQuery(query);
            ResultSet rs2;
            int size = 0;
            while (rs.next()) {
                size++;
            }
            while (rs.previous());
            //JOptionPane.showMessageDialog(this, size);
            while (rs.next()) {
                rows = 0;
                rows++;
                System.out.println("Hi1");
                String isbn = rs.getString("ISBN");
                if (isInList(isbn, model2)) {
                    continue;
                }

                String bookname = rs.getString("Book_Name");
                int edition = rs.getInt("Edition");
                double price = rs.getDouble("Price");
                String desc = rs.getString("Description");
                int pages = rs.getInt("Pages");
                String lang = rs.getString("Language");
                String pid = rs.getString("P_ID");
                String genre = rs.getString("genre");
                String an = rs.getString("Author_name");
                String query2 = "Insert into cart Values('" + selectedISBN + "'," + CustomerLogin.cusid + "," + edition + ","+ price + ",'" + desc + " '," + pages + ", '" + lang + "','" + pid+ "','" + genre + "','" + bookname + "','" + an + "' );";
                //Cart( Book_ISBN int(10) ,Cus_ID int(10), Edition int(3) , Price decimal(10,2) , Description varchar(50) , Pages int(5) , Language varchar(10) ,Pub_ID int(10), Genre varchar(50),BookName varchar(150), AuthorName varchar(50));
                 System.out.println("Hitttt1");
                stmt.execute(query2);
                System.out.println("e");
                String query3 = "Select * from cart where Cus_ID = '" + CustomerLogin.cusid + "' ;";
                System.out.println("zxc");
                rs2 = stmt.executeQuery(query3);
                JOptionPane.showMessageDialog(this, "This book has been added to your cart.");
                System.out.println("r");
                while (rs2.next()) {
                    System.out.println("Hitttt1");
                    isbn = rs2.getString("ISBN");
                    if (isInList(isbn, model2)) {
                        continue;
                    }
                    bookname = rs2.getString("Book_Name");
                    edition = rs2.getInt("Edition");
                    price = rs2.getDouble("Price");
                    desc = rs2.getString("Description");
                    pages = rs2.getInt("Pages");
                    lang = rs2.getString("Language");
                    pid = rs2.getString("P_ID");
                    genre = rs2.getString("genre");
                    an = rs2.getString("Author_name");
                    System.out.println("qwerty" + genre);
                    model2.addRow(new Object[]{isbn, bookname, edition, price, desc, pages, lang, pid, genre, an});
                }
            }

            if (rows == 2) {
                JOptionPane.showMessageDialog(this, "No Books.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    boolean isInList(String isbn, DefaultTableModel md) {
        int num = md.getRowCount();
        for (int i = 0; i < num; i++) {
            if (md.getValueAt(i, 0).toString().equals(isbn)) {
                return true;
            }
        }
        return false;
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        clearTable(model);
    }//GEN-LAST:event_jButton4ActionPerformed

    void clearTable(DefaultTableModel model) {
        rows = jTable1.getRowCount();
        int i = rows;
        while (i != 0) {
            model.removeRow(0);
            i = i - 1;
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int count = 0;
        String Table_Name = "Books";
        String Book_Name = null;
        String Genre = null;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = model.getRowCount();
        if (jComboBox1.getSelectedIndex() == 1) {
            clearTable(model);
            Book_Name = JOptionPane.showInputDialog(this, "Enter book name:");
            try {
               Class.forName("com.mysql.jdbc.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
                Statement stmt = (Statement) con.createStatement();
                String query = "Select * from " + Table_Name + " where Book_Name LIKE '%" + Book_Name + "' OR '"+ Book_Name +"%' OR '%"+ Book_Name + "%';";
                ResultSet rs = stmt.executeQuery(query);

                while (rs.next()) {
                    cb1 = 0;
                    cb1++;
                    String isbn = rs.getString("ISBN");
                    String bookname = rs.getString("Book_Name");
                    int edition = rs.getInt("Edition");
                    double price = rs.getDouble("Price");
                    String desc = rs.getString("Description");
                    int pages = rs.getInt("Pages");
                    String lang = rs.getString("Language");
                    String pid = rs.getString("P_ID");
                    String genre = rs.getString("genre");
                    String an = rs.getString("Author_name");
                    model.addRow(new Object[]{isbn, bookname, edition, price, desc, pages, lang, pid, genre, an});
                    count = 1;
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "NO suck Book");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
            if (cb1 == 0) {
                JOptionPane.showMessageDialog(this, "No books");
            }

        } else if (jComboBox1.getSelectedIndex() == 2) {
            clearTable(model);
            Genre = JOptionPane.showInputDialog(this, "The genres available are:\nCrime, History, Humor, Romantic, Education,\nLiterature, Mystery, Horror, Thriller, Gothic,\nFantasy and Fiction.\n\n"
                    + ""
                    + "Enter Genre:");
            try {
               Class.forName("com.mysql.jdbc.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
                Statement stmt = (Statement) con.createStatement();
                String query = "Select * from " + Table_Name + " where genre = '" + Genre + "';";
                ResultSet rs = stmt.executeQuery(query);
                while (rs.next()) {
                    cb1 = 0;
                    cb1++;
                    String isbn = rs.getString("ISBN");
                    if (isInList(isbn, model)) {
                        continue;
                    }
                    String bookname = rs.getString("Book_Name");
                    int edition = rs.getInt("Edition");
                    double price = rs.getDouble("Price");
                    String desc = rs.getString("Description");
                    int pages = rs.getInt("Pages");
                    String lang = rs.getString("Language");
                    String pid = rs.getString("P_ID");
                    String genre = rs.getString("genre");
                    String an = rs.getString("Author_name");
                    model.addRow(new Object[]{isbn, bookname, edition, price, desc, pages, lang, pid, genre, an});
                    count = 1;
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "NO suck Book");
                }
            } catch (Exception e) {
                JOptionPane.showInputDialog(this, e.getMessage());
            }
            if (cb1 == 0) {
                JOptionPane.showMessageDialog(this, "No books");
            }
        } else if (jComboBox1.getSelectedIndex() == 3) {
            clearTable(model);
            try {
               Class.forName("com.mysql.jdbc.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
                Statement stmt = (Statement) con.createStatement();
                String query = "Select * from " + Table_Name + " order by Price;";
                ResultSet rs = stmt.executeQuery(query);
                while (rs.next()) {
                    cb1 = 0;
                    cb1++;
                    String isbn = rs.getString("ISBN");
                    if (isInList(isbn, model)) {
                        continue;
                    }
                    String bookname = rs.getString("Book_Name");
                    int edition = rs.getInt("Edition");
                    double price = rs.getDouble("Price");
                    String desc = rs.getString("Description");
                    int pages = rs.getInt("Pages");
                    String lang = rs.getString("Language");
                    String pid = rs.getString("P_ID");
                    String genre = rs.getString("genre");
                    String an = rs.getString("Author_name");
                    model.addRow(new Object[]{isbn, bookname, edition, price, desc, pages, lang, pid, genre, an});
                    count = 1;
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "NO Book");
                }
            } catch (Exception e) {
                JOptionPane.showInputDialog(this, e.getMessage());
            }
            if (cb1 == 0) {
                JOptionPane.showMessageDialog(this, "No books");
            }
        } else if (jComboBox1.getSelectedIndex() == 4) {
            clearTable(model);
            try {
               Class.forName("com.mysql.jdbc.Driver");
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
                Statement stmt = (Statement) con.createStatement();
                String query = "Select * from " + Table_Name + " order by Price desc;";
                ResultSet rs = stmt.executeQuery(query);
                while (rs.next()) {
                    cb1 = 0;
                    cb1++;
                    String isbn = rs.getString("ISBN");
                    if (isInList(isbn, model)) {
                        continue;
                    }
                    String bookname = rs.getString("Book_Name");
                    int edition = rs.getInt("Edition");
                    double price = rs.getDouble("Price");
                    String desc = rs.getString("Description");
                    int pages = rs.getInt("Pages");
                    String lang = rs.getString("Language");
                    String pid = rs.getString("P_ID");
                    String genre = rs.getString("genre");
                    String an = rs.getString("Author_name");
                    model.addRow(new Object[]{isbn, bookname, edition, price, desc, pages, lang, pid, genre, an});
                    count = 1;
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(this, "NO Books");
                }
            } catch (Exception e) {
                JOptionPane.showInputDialog(this, e.getMessage());
            }
            if (cb1 == 0) {
                JOptionPane.showMessageDialog(this, "No books");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    static int count5 = 0;

    public void viewCart() {
        DefaultTableModel md = (DefaultTableModel) jTable2.getModel();
        try {
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
            java.sql.Statement stmt = (java.sql.Statement) con.createStatement();
            String query = "Select * from cart where Cus_ID = " + CustomerLogin.cusid + " ;";
            stmt.executeQuery(query);
            System.out.println("sjdjsdsdsds");
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                cb1 = 0;
                cb1++;
                String isbn = rs.getString("Book_ISBN");
                if (isInList(isbn, md)) {
                    continue;
                }
                String bookname = rs.getString("BookName");
                System.out.println("sdfsf");
                int edition = rs.getInt("Edition");
                //System.out.println("ED: "+edition);
                double price = rs.getDouble("Price");
                String desc = rs.getString("Description");
                int pages = rs.getInt("Pages");
                String lang = rs.getString("Language");
                String pid = rs.getString("Pub_ID");
                String genre = rs.getString("genre");
                String an = rs.getString("Authorname");
                md.addRow(new Object[]{isbn, bookname, edition, price, desc, pages, lang, pid, genre, an});
                count5 = 1;
                //Cart( Book_ISBN int(10) ,Cus_ID int(10), Edition int(3) , Price decimal(10,2) , Description varchar(50) , Pages int(5) , Language varchar(10) ,Pub_ID int(10), Genre varchar(50),BookName varchar(150), AuthorName varchar(50));
            }
            if (count5 == 0) {
                JOptionPane.showMessageDialog(this, "No Items In Cart.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (cb1 == 0) {
            JOptionPane.showMessageDialog(this, "No orders.");
        }
    }
    /*boolean isInList(String isbn, DefaultTableModel md){
     int num = md.getRowCount();
     for(int i=0;i<num;i++){
     if(md.getValueAt(i, 0).toString().equals(isbn))
     return true;
     }
     return false;
     }*/

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        viewCart();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        count1 = 0;
        try {
           Class.forName("com.mysql.jdbc.Driver");
            Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
            Statement stmt = (Statement) con.createStatement();
            String query1 = "Set foreign_key_checks = 0;";
            String query2 = "Truncate table Order_item;";
            String query3 = "Set foreign_key_checks = 1;";
            stmt.executeQuery(query1);
            stmt.executeQuery(query2);
            stmt.executeQuery(query3);
            this.setVisible(false);
            new CustomerOptions().setVisible(true);
        } catch (Exception e) {
            JOptionPane.showInputDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        viewOrders();
        System.out.println("Amount: " + Amount);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        jTable2.setCellSelectionEnabled(true);
        ListSelectionModel cellSelectionModel = jTable2.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectedISBN = null;
        int[] selectedRow = jTable2.getSelectedRows();
        int[] selectedColumns = jTable2.getSelectedColumns();

        for (int i = 0; i < selectedRow.length; i++) {
            for (int j = 0; j < selectedColumns.length; j++) {
                selectedISBN = (String) jTable2.getValueAt(selectedRow[i], selectedColumns[j]);
            }
        }
        System.out.println("abc Selected: " + selectedISBN);
        try {
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
           java.sql.Statement stmt = (java.sql.Statement) con.createStatement();
            String query = "Delete from cart where Book_ISBN = '" + selectedISBN + "' AND Cus_ID = '" + CustomerLogin.cusid + "';";
            stmt.executeUpdate(query);
            this.setVisible(false);
            new CustomerOptions().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
 
        new Order().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel md = (DefaultTableModel) jTable4.getModel();
        try {
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
            java.sql.Statement stmt = (java.sql.Statement) con.createStatement();
            String query = "Select * from Customer where Customer_ID='" + CustomerLogin.cusid + "';";
            stmt.executeQuery(query);
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                rows = 0;
                rows++;
                String cus_id = rs.getString("Customer_ID");
                if (isInList(cus_id, md)) {
                    continue;
                }
                String name = rs.getString("Customer_Name");
                String email = rs.getString("Customer_Email");
                String add = rs.getString("Customer_Address");
                int zip = rs.getInt("Customer_Zip");
                String phno = rs.getString("Customer_phone_no");
                String country = rs.getString("Country");
                md.addRow(new Object[]{cus_id, name, add, country, zip, phno, email});
            }
//Customer( Customer_ID varchar(10) primary key , Customer_Name varchar(50)  , Customer_Address varchar(50), Customer_ZIP int(6), Country Varchar(50), Customer_phone_no int(10) ,Customer_Email varchar(50) , Customer_Password varchar(100));
            if (rows == 2) {
                JOptionPane.showMessageDialog(this, "No Customer.");
            }
        } catch (Exception e) {
            JOptionPane.showInputDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton12ActionPerformed
    int cb1 = 2;
    int rows = 2;
    int count1 = 0;

    public void viewOrders() {

        // double sum = 0;
        DefaultTableModel md = (DefaultTableModel) jTable3.getModel();
        try {
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con = (java.sql.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/library1", "root", "karan");
            java.sql.Statement stmt = (java.sql.Statement) con.createStatement();
            String query = "Select * from order_item where Cus_ID = " + CustomerLogin.cusid + " ;";
         
            stmt.executeQuery(query);
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                cb1 = 0;
                cb1++;
                String isbn = rs.getString("Book_ISBN");
                //Order_Item( ID int(10) , Date date , Cus_ID int(10) , Book_ISBN int(10) , Item_Price Decimal(10,2) , Quantity int(3));
                if (isInList(isbn, md)) {
                    //continue;
                }
                 System.out.println("hyhyh");
                String oi = rs.getString("ID");
                String order_date = rs.getString("Date");
                //  String paytype = rs.getString("payment_type");
                double pr = rs.getDouble("Item_Price");
                int q = Integer.parseInt(rs.getString("Quantity"));
               
                Amount = Amount + (pr * q);

                //md.addRow(new Object[]{isbn, oi, order_date, pr, q});
                count1 = 1;
                jLabel6.setText("Payment Due!");
            }
            // Amount = sum;
            if (count1 == 0) {
                JOptionPane.showMessageDialog(this, "No Orders.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
}
